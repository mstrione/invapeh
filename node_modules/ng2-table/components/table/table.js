/// <reference path="../../tsd.d.ts" />
System.register(['angular2/angular2', './sorting'], function(exports_1) {
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var angular2_1, sorting_1;
    var Table;
    return {
        setters:[
            function (angular2_1_1) {
                angular2_1 = angular2_1_1;
            },
            function (sorting_1_1) {
                sorting_1 = sorting_1_1;
            }],
        execute: function() {
            // todo: use lodash#defaults for configuration
            // todo: expose an option to change default configuration
            Table = (function () {
                function Table() {
                    // Table values
                    this.rows = [];
                    this._columns = [];
                    this.config = {};
                    // Outputs (Events)
                    this.tableChanged = new angular2_1.EventEmitter();
                }
                Object.defineProperty(Table.prototype, "columns", {
                    get: function () {
                        return this._columns;
                    },
                    set: function (values) {
                        var _this = this;
                        values.forEach(function (value) {
                            var column = _this._columns.find(function (col) { return col.name === value.name; });
                            if (column) {
                                Object.assign(column, value);
                            }
                            if (!column) {
                                _this._columns.push(value);
                            }
                        });
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Table.prototype, "configColumns", {
                    get: function () {
                        var sortColumns = [];
                        this.columns.forEach(function (column) {
                            if (column.sort) {
                                sortColumns.push(column);
                            }
                        });
                        return { columns: sortColumns };
                    },
                    enumerable: true,
                    configurable: true
                });
                Table.prototype.onChangeTable = function (column) {
                    this.columns = [column];
                    this.tableChanged.next({ sorting: this.configColumns });
                };
                Table = __decorate([
                    angular2_1.Component({
                        selector: 'ng2-table, [ng2-table]',
                        inputs: ['rows', 'columns', 'config'],
                        outputs: ['tableChanged']
                    }),
                    angular2_1.View({
                        template: "\n<table class=\"table table-striped table-bordered dataTable\"\n       role=\"grid\" style=\"width: 100%;\">\n  <thead>\n  <tr role=\"row\">\n    <th *ng-for=\"#column of columns\" [ng2-th-sortable]=\"config\" [column]=\"column\" (sort-changed)=\"onChangeTable($event)\">\n      {{column.title}}\n      <i *ng-if=\"config && column.sort\" class=\"pull-right glyphicon\"\n        [ng-class]=\"{'glyphicon-chevron-down': column.sort === 'desc', 'glyphicon-chevron-up': column.sort === 'asc'}\"></i>\n    </th>\n  </tr>\n  </thead>\n  <tbody>\n  <tr *ng-for=\"#row of rows\">\n    <td *ng-for=\"#column of columns\">{{row[column.name]}}</td>\n  </tr>\n  </tbody>\n</table>\n",
                        directives: [sorting_1.Ng2ThSortable, angular2_1.NgClass, angular2_1.CORE_DIRECTIVES, angular2_1.FORM_DIRECTIVES]
                    }), 
                    __metadata('design:paramtypes', [])
                ], Table);
                return Table;
            })();
            exports_1("Table", Table);
        }
    }
});
//# sourceMappingURL=table.js.map
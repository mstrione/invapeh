/// <reference path="../../tsd.d.ts" />
System.register(['angular2/angular2'], function(exports_1) {
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var angular2_1;
    var Ng2TableFilter;
    // import {setProperty} from 'angular2/ts/src/core/forms/directives/shared';
    function setProperty(renderer, elementRef, propName, propValue) {
        renderer.setElementProperty(elementRef, propName, propValue);
    }
    return {
        setters:[
            function (angular2_1_1) {
                angular2_1 = angular2_1_1;
            }],
        execute: function() {
            Ng2TableFilter = (function () {
                function Ng2TableFilter(element, renderer) {
                    this.element = element;
                    this.renderer = renderer;
                    this.config = {
                        filterString: '',
                        columnName: 'name'
                    };
                    this.tableChanged = new angular2_1.EventEmitter();
                    // Set default value for filter
                    setProperty(this.renderer, this.element, 'value', this.config.filterString);
                }
                Ng2TableFilter.prototype.onChangeFilter = function (event) {
                    this.config.filterString = event;
                    this.tableChanged.next({ 'filtering': this.config });
                };
                Ng2TableFilter = __decorate([
                    angular2_1.Directive({
                        selector: '[ng2-table-filter]',
                        inputs: ['config: ng2TableFilter'],
                        outputs: ['tableChanged'],
                        host: {
                            '(input)': 'onChangeFilter($event.target.value)'
                        }
                    }), 
                    __metadata('design:paramtypes', [angular2_1.ElementRef, angular2_1.Renderer])
                ], Ng2TableFilter);
                return Ng2TableFilter;
            })();
            exports_1("Ng2TableFilter", Ng2TableFilter);
        }
    }
});
//# sourceMappingURL=filtering.js.map
{"version":3,"sources":["../../es6/util/subscribeToResult.js"],"names":[],"mappings":";;;qBAKwB,iBAAiB;;;;0BALlB,eAAe;;;;mCACf,yBAAyB;;;;qCACvB,2BAA2B;;;;+BACxB,oBAAoB;;;;AAChD,IAAM,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC;;AACf,SAAS,iBAAiB,CAAC,eAAe,EAAE,MAAM,EAAE,UAAU,EAAE,UAAU,EAAE;AACvF,QAAI,WAAW,GAAG,iCAAoB,eAAe,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;AAC/E,QAAI,WAAW,CAAC,cAAc,EAAE;AAC5B,eAAO;KACV;AACD,QAAI,MAAM,mCAAsB,EAAE;AAC9B,YAAI,MAAM,CAAC,SAAS,EAAE;AAClB,uBAAW,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AAC/B,uBAAW,CAAC,QAAQ,EAAE,CAAC;AACvB,mBAAO;SACV,MACI;AACD,mBAAO,MAAM,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;SACxC;KACJ;AACD,QAAI,OAAO,CAAC,MAAM,CAAC,EAAE;AACjB,aAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,cAAc,EAAE,CAAC,EAAE,EAAE;AAC9E,uBAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;SAC/B;AACD,YAAI,CAAC,WAAW,CAAC,cAAc,EAAE;AAC7B,uBAAW,CAAC,QAAQ,EAAE,CAAC;SAC1B;KACJ,MACI,IAAI,OAAO,MAAM,CAAC,IAAI,KAAK,UAAU,EAAE;AACxC,cAAM,CAAC,IAAI,CAAC,UAAA,CAAC,EAAI;AACb,gBAAI,CAAC,WAAW,CAAC,cAAc,EAAE;AAC7B,2BAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACpB,2BAAW,CAAC,QAAQ,EAAE,CAAC;aAC1B;SACJ,EAAE,UAAA,GAAG;mBAAI,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC;SAAA,CAAC,CAC5B,IAAI,CAAC,IAAI,EAAE,UAAA,GAAG,EAAI;;AAEnB,sBAAU,CAAC,YAAM;AAAE,sBAAM,GAAG,CAAC;aAAE,CAAC,CAAC;SACpC,CAAC,CAAC;AACH,eAAO,WAAW,CAAC;KACtB,MACI,IAAI,OAAO,MAAM,kCAAY,KAAK,UAAU,EAAE;AAC/C,6BAAiB,MAAM,kHAAE;;;;;;;;;;;;gBAAhB,IAAI;;AACT,uBAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACvB,gBAAI,WAAW,CAAC,cAAc,EAAE;AAC5B,sBAAM;aACT;SACJ;AACD,YAAI,CAAC,WAAW,CAAC,cAAc,EAAE;AAC7B,uBAAW,CAAC,QAAQ,EAAE,CAAC;SAC1B;KACJ,MACI,IAAI,OAAO,MAAM,oCAAc,KAAK,UAAU,EAAE;AACjD,YAAM,GAAG,GAAG,MAAM,oCAAc,EAAE,CAAC;AACnC,YAAI,OAAO,GAAG,CAAC,SAAS,KAAK,UAAU,EAAE;AACrC,uBAAW,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC;SAC3C,MACI;AACD,mBAAO,GAAG,CAAC,SAAS,CAAC,iCAAoB,eAAe,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC,CAAC;SACtF;KACJ,MACI;AACD,mBAAW,CAAC,KAAK,CAAC,IAAI,SAAS,CAAC,uBAAuB,CAAC,CAAC,CAAC;KAC7D;CACJ","file":"subscribeToResult.js","sourcesContent":["import Observable from '../Observable';\nimport $$iterator from '../util/Symbol_iterator';\nimport $$observable from '../util/Symbol_observable';\nimport InnerSubscriber from '../InnerSubscriber';\nconst isArray = Array.isArray;\nexport default function subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {\n    let destination = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n    if (destination.isUnsubscribed) {\n        return;\n    }\n    if (result instanceof Observable) {\n        if (result._isScalar) {\n            destination.next(result.value);\n            destination.complete();\n            return;\n        }\n        else {\n            return result.subscribe(destination);\n        }\n    }\n    if (isArray(result)) {\n        for (let i = 0, len = result.length; i < len && !destination.isUnsubscribed; i++) {\n            destination.next(result[i]);\n        }\n        if (!destination.isUnsubscribed) {\n            destination.complete();\n        }\n    }\n    else if (typeof result.then === 'function') {\n        result.then(x => {\n            if (!destination.isUnsubscribed) {\n                destination.next(x);\n                destination.complete();\n            }\n        }, err => destination.error(err))\n            .then(null, err => {\n            // Escaping the Promise trap: globally throw unhandled errors\n            setTimeout(() => { throw err; });\n        });\n        return destination;\n    }\n    else if (typeof result[$$iterator] === 'function') {\n        for (let item of result) {\n            destination.next(item);\n            if (destination.isUnsubscribed) {\n                break;\n            }\n        }\n        if (!destination.isUnsubscribed) {\n            destination.complete();\n        }\n    }\n    else if (typeof result[$$observable] === 'function') {\n        const obs = result[$$observable]();\n        if (typeof obs.subscribe !== 'function') {\n            destination.error('invalid observable');\n        }\n        else {\n            return obs.subscribe(new InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n        }\n    }\n    else {\n        destination.error(new TypeError('unknown type returned'));\n    }\n}\n//# sourceMappingURL=subscribeToResult.js.map"]}
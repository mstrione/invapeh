{"version":3,"sources":["../../es6/observables/RangeObservable.js"],"names":[],"mappings":";;;;;;;;;;2BAAuB,eAAe;;;;IACjB,eAAe;cAAf,eAAe;;AACrB,aADM,eAAe,CACpB,KAAK,EAAE,GAAG,EAAE,SAAS,EAAE;8BADlB,eAAe;;AAE5B,8BAAO,CAAC;AACR,YAAI,CAAC,KAAK,GAAG,KAAK,CAAC;AACnB,YAAI,CAAC,GAAG,GAAG,GAAG,CAAC;AACf,YAAI,CAAC,SAAS,GAAG,SAAS,CAAC;KAC9B;;;;AANgB,mBAAe,CAOzB,MAAM,GAAA,gBAAC,KAAK,EAAM,GAAG,EAAM,SAAS,EAAE;YAA/B,KAAK,gBAAL,KAAK,GAAG,CAAC;YAAE,GAAG,gBAAH,GAAG,GAAG,CAAC;;AAC5B,eAAO,IAAI,eAAe,CAAC,KAAK,EAAE,GAAG,EAAE,SAAS,CAAC,CAAC;KACrD;;AATgB,mBAAe,CAUzB,QAAQ,GAAA,kBAAC,KAAK,EAAE;YACX,KAAK,GAA6B,KAAK,CAAvC,KAAK;YAAE,KAAK,GAAsB,KAAK,CAAhC,KAAK;YAAE,GAAG,GAAiB,KAAK,CAAzB,GAAG;YAAE,UAAU,GAAK,KAAK,CAApB,UAAU;;AACrC,YAAI,KAAK,IAAI,GAAG,EAAE;AACd,sBAAU,CAAC,QAAQ,EAAE,CAAC;AACtB,mBAAO;SACV;AACD,kBAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACvB,YAAI,UAAU,CAAC,cAAc,EAAE;AAC3B,mBAAO;SACV;AACD,aAAK,CAAC,KAAK,GAAG,KAAK,GAAG,CAAC,CAAC;AACxB,aAAK,CAAC,KAAK,GAAG,KAAK,GAAG,CAAC,CAAC;AACxB,YAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;KACxB;;AAvBgB,mBAAe,WAwBhC,UAAU,GAAA,oBAAC,UAAU,EAAE;AACnB,YAAI,KAAK,GAAG,CAAC,CAAC;AACd,YAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;AACvB,YAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;AACrB,YAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;AACjC,YAAI,SAAS,EAAE;AACX,sBAAU,CAAC,GAAG,CAAC,SAAS,CAAC,QAAQ,CAAC,eAAe,CAAC,QAAQ,EAAE,CAAC,EAAE;AAC3D,qBAAK,EAAL,KAAK,EAAE,GAAG,EAAH,GAAG,EAAE,KAAK,EAAL,KAAK,EAAE,UAAU,EAAV,UAAU;aAChC,CAAC,CAAC,CAAC;SACP,MACI;AACD,eAAG;AACC,oBAAI,KAAK,EAAE,IAAI,GAAG,EAAE;AAChB,8BAAU,CAAC,QAAQ,EAAE,CAAC;AACtB,0BAAM;iBACT;AACD,0BAAU,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;AACzB,oBAAI,UAAU,CAAC,cAAc,EAAE;AAC3B,0BAAM;iBACT;aACJ,QAAQ,IAAI,EAAE;SAClB;KACJ;;WA9CgB,eAAe;;;qBAAf,eAAe","file":"RangeObservable.js","sourcesContent":["import Observable from '../Observable';\nexport default class RangeObservable extends Observable {\n    constructor(start, end, scheduler) {\n        super();\n        this.start = start;\n        this.end = end;\n        this.scheduler = scheduler;\n    }\n    static create(start = 0, end = 0, scheduler) {\n        return new RangeObservable(start, end, scheduler);\n    }\n    static dispatch(state) {\n        const { start, index, end, subscriber } = state;\n        if (index >= end) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(start);\n        if (subscriber.isUnsubscribed) {\n            return;\n        }\n        state.index = index + 1;\n        state.start = start + 1;\n        this.schedule(state);\n    }\n    _subscribe(subscriber) {\n        let index = 0;\n        let start = this.start;\n        const end = this.end;\n        const scheduler = this.scheduler;\n        if (scheduler) {\n            subscriber.add(scheduler.schedule(RangeObservable.dispatch, 0, {\n                index, end, start, subscriber\n            }));\n        }\n        else {\n            do {\n                if (index++ >= end) {\n                    subscriber.complete();\n                    break;\n                }\n                subscriber.next(start++);\n                if (subscriber.isUnsubscribed) {\n                    break;\n                }\n            } while (true);\n        }\n    }\n}\n//# sourceMappingURL=RangeObservable.js.map"]}
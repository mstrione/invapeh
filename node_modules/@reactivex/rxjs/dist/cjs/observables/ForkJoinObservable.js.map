{"version":3,"sources":["../../es6/observables/ForkJoinObservable.js"],"names":[],"mappings":";;;;;;;;;;2BAAuB,eAAe;;;;2BACf,eAAe;;;;IACjB,kBAAkB;cAAlB,kBAAkB;;AACxB,aADM,kBAAkB,CACvB,WAAW,EAAE;8BADR,kBAAkB;;AAE/B,8BAAO,CAAC;AACR,YAAI,CAAC,WAAW,GAAG,WAAW,CAAC;KAClC;;AAJgB,sBAAkB,CAK5B,MAAM,GAAA,kBAAiB;0CAAb,WAAW;AAAX,uBAAW;;;AACxB,eAAO,IAAI,kBAAkB,CAAC,WAAW,CAAC,CAAC;KAC9C;;AAPgB,sBAAkB,WAQnC,UAAU,GAAA,oBAAC,UAAU,EAAE;AACnB,YAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;AACrC,YAAM,GAAG,GAAG,WAAW,CAAC,MAAM,CAAC;AAC/B,YAAI,OAAO,GAAG,EAAE,QAAQ,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,EAAE,MAAM,EAAE,UAAU,CAAC,GAAG,CAAC,EAAE,CAAC;AACnE,aAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;AAC1B,uBAAW,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,aAAa,CAAC,UAAU,EAAE,IAAI,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;SAC7E;KACJ;;WAfgB,kBAAkB;;;qBAAlB,kBAAkB;;IAiBjC,aAAa;cAAb,aAAa;;AACJ,aADT,aAAa,CACH,WAAW,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE;8BAD/C,aAAa;;AAEX,+BAAM,WAAW,CAAC,CAAC;AACnB,YAAI,CAAC,MAAM,GAAG,MAAM,CAAC;AACrB,YAAI,CAAC,KAAK,GAAG,KAAK,CAAC;AACnB,YAAI,CAAC,OAAO,GAAG,OAAO,CAAC;KAC1B;;AANC,iBAAa,WAOf,KAAK,GAAA,eAAC,KAAK,EAAE;AACT,YAAI,CAAC,MAAM,GAAG,KAAK,CAAC;KACvB;;AATC,iBAAa,WAUf,SAAS,GAAA,qBAAG;AACR,YAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;AAC7B,eAAO,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;AACzC,YAAI,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE;AAChC,gBAAI,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;AACtC,gBAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC;SAC/B;KACJ;;WAjBC,aAAa;;;AAmBnB,SAAS,QAAQ,CAAC,CAAC,EAAE;AACjB,WAAO,CAAC,KAAK,IAAI,CAAC;CACrB;AACD,SAAS,UAAU,CAAC,GAAG,EAAE;AACrB,QAAI,GAAG,GAAG,EAAE,CAAC;AACb,SAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;AAC1B,WAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KAClB;AACD,WAAO,GAAG,CAAC;CACd","file":"ForkJoinObservable.js","sourcesContent":["import Observable from '../Observable';\nimport Subscriber from '../Subscriber';\nexport default class ForkJoinObservable extends Observable {\n    constructor(observables) {\n        super();\n        this.observables = observables;\n    }\n    static create(...observables) {\n        return new ForkJoinObservable(observables);\n    }\n    _subscribe(subscriber) {\n        const observables = this.observables;\n        const len = observables.length;\n        let context = { complete: 0, total: len, values: emptyArray(len) };\n        for (let i = 0; i < len; i++) {\n            observables[i].subscribe(new AllSubscriber(subscriber, this, i, context));\n        }\n    }\n}\nclass AllSubscriber extends Subscriber {\n    constructor(destination, parent, index, context) {\n        super(destination);\n        this.parent = parent;\n        this.index = index;\n        this.context = context;\n    }\n    _next(value) {\n        this._value = value;\n    }\n    _complete() {\n        const context = this.context;\n        context.values[this.index] = this._value;\n        if (context.values.every(hasValue)) {\n            this.destination.next(context.values);\n            this.destination.complete();\n        }\n    }\n}\nfunction hasValue(x) {\n    return x !== null;\n}\nfunction emptyArray(len) {\n    let arr = [];\n    for (let i = 0; i < len; i++) {\n        arr.push(null);\n    }\n    return arr;\n}\n//# sourceMappingURL=ForkJoinObservable.js.map"]}
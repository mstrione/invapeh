{"version":3,"sources":["../../es6/observables/ArrayObservable.js"],"names":[],"mappings":";;;;;;;;;;2BAAuB,eAAe;;;;gCACT,oBAAoB;;;;+BACrB,mBAAmB;;;;IAC1B,eAAe;cAAf,eAAe;;AACrB,aADM,eAAe,CACpB,KAAK,EAAE,SAAS,EAAE;8BADb,eAAe;;AAE5B,8BAAO,CAAC;AACR,YAAI,CAAC,KAAK,GAAG,KAAK,CAAC;AACnB,YAAI,CAAC,SAAS,GAAG,SAAS,CAAC;AAC3B,YAAI,CAAC,SAAS,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;AAClC,gBAAI,CAAC,SAAS,GAAG,IAAI,CAAC;AACtB,gBAAI,CAAC,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;SACzB;KACJ;;;;AATgB,mBAAe,CAUzB,MAAM,GAAA,gBAAC,KAAK,EAAE,SAAS,EAAE;AAC5B,eAAO,IAAI,eAAe,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;KAChD;;AAZgB,mBAAe,CAazB,EAAE,GAAA,cAAW;0CAAP,KAAK;AAAL,iBAAK;;;AACd,YAAI,SAAS,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;AACxC,YAAI,SAAS,IAAI,OAAO,SAAS,CAAC,QAAQ,KAAK,UAAU,EAAE;AACvD,iBAAK,CAAC,GAAG,EAAE,CAAC;SACf,MACI;AACD,qBAAS,GAAG,KAAK,CAAC,CAAC;SACtB;AACD,YAAM,GAAG,GAAG,KAAK,CAAC,MAAM,CAAC;AACzB,YAAI,GAAG,GAAG,CAAC,EAAE;AACT,mBAAO,IAAI,eAAe,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;SAChD,MACI,IAAI,GAAG,KAAK,CAAC,EAAE;AAChB,mBAAO,kCAAqB,KAAK,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC;SACpD,MACI;AACD,mBAAO,iCAAoB,SAAS,CAAC,CAAC;SACzC;KACJ;;AA/BgB,mBAAe,CAgCzB,QAAQ,GAAA,kBAAC,KAAK,EAAE;YACX,KAAK,GAA+B,KAAK,CAAzC,KAAK;YAAE,KAAK,GAAwB,KAAK,CAAlC,KAAK;YAAE,KAAK,GAAiB,KAAK,CAA3B,KAAK;YAAE,UAAU,GAAK,KAAK,CAApB,UAAU;;AACvC,YAAI,KAAK,IAAI,KAAK,EAAE;AAChB,sBAAU,CAAC,QAAQ,EAAE,CAAC;AACtB,mBAAO;SACV;AACD,kBAAU,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;AAC9B,YAAI,UAAU,CAAC,cAAc,EAAE;AAC3B,mBAAO;SACV;AACD,aAAK,CAAC,KAAK,GAAG,KAAK,GAAG,CAAC,CAAC;AACxB,YAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;KACxB;;AA5CgB,mBAAe,WA6ChC,UAAU,GAAA,oBAAC,UAAU,EAAE;AACnB,YAAI,KAAK,GAAG,CAAC,CAAC;AACd,YAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;AACzB,YAAM,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC;AAC3B,YAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;AACjC,YAAI,SAAS,EAAE;AACX,sBAAU,CAAC,GAAG,CAAC,SAAS,CAAC,QAAQ,CAAC,eAAe,CAAC,QAAQ,EAAE,CAAC,EAAE;AAC3D,qBAAK,EAAL,KAAK,EAAE,KAAK,EAAL,KAAK,EAAE,KAAK,EAAL,KAAK,EAAE,UAAU,EAAV,UAAU;aAClC,CAAC,CAAC,CAAC;SACP,MACI;AACD,iBAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,IAAI,CAAC,UAAU,CAAC,cAAc,EAAE,CAAC,EAAE,EAAE;AAC1D,0BAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;aAC7B;AACD,sBAAU,CAAC,QAAQ,EAAE,CAAC;SACzB;KACJ;;WA7DgB,eAAe;;;qBAAf,eAAe","file":"ArrayObservable.js","sourcesContent":["import Observable from '../Observable';\nimport ScalarObservable from './ScalarObservable';\nimport EmptyObservable from './EmptyObservable';\nexport default class ArrayObservable extends Observable {\n    constructor(array, scheduler) {\n        super();\n        this.array = array;\n        this.scheduler = scheduler;\n        if (!scheduler && array.length === 1) {\n            this._isScalar = true;\n            this.value = array[0];\n        }\n    }\n    static create(array, scheduler) {\n        return new ArrayObservable(array, scheduler);\n    }\n    static of(...array) {\n        let scheduler = array[array.length - 1];\n        if (scheduler && typeof scheduler.schedule === 'function') {\n            array.pop();\n        }\n        else {\n            scheduler = void 0;\n        }\n        const len = array.length;\n        if (len > 1) {\n            return new ArrayObservable(array, scheduler);\n        }\n        else if (len === 1) {\n            return new ScalarObservable(array[0], scheduler);\n        }\n        else {\n            return new EmptyObservable(scheduler);\n        }\n    }\n    static dispatch(state) {\n        const { array, index, count, subscriber } = state;\n        if (index >= count) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(array[index]);\n        if (subscriber.isUnsubscribed) {\n            return;\n        }\n        state.index = index + 1;\n        this.schedule(state);\n    }\n    _subscribe(subscriber) {\n        let index = 0;\n        const array = this.array;\n        const count = array.length;\n        const scheduler = this.scheduler;\n        if (scheduler) {\n            subscriber.add(scheduler.schedule(ArrayObservable.dispatch, 0, {\n                array, index, count, subscriber\n            }));\n        }\n        else {\n            for (let i = 0; i < count && !subscriber.isUnsubscribed; i++) {\n                subscriber.next(array[i]);\n            }\n            subscriber.complete();\n        }\n    }\n}\n//# sourceMappingURL=ArrayObservable.js.map"]}
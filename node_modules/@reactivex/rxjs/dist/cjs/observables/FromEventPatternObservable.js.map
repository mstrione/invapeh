{"version":3,"sources":["../../es6/observables/FromEventPatternObservable.js"],"names":[],"mappings":";;;;;;;;;;2BAAuB,eAAe;;;;4BACb,iBAAiB;;;;4BACrB,kBAAkB;;;;+BACX,qBAAqB;;IAC5B,0BAA0B;cAA1B,0BAA0B;;AAChC,aADM,0BAA0B,CAC/B,UAAU,EAAE,aAAa,EAAE,QAAQ,EAAE;8BADhC,0BAA0B;;AAEvC,8BAAO,CAAC;AACR,YAAI,CAAC,UAAU,GAAG,UAAU,CAAC;AAC7B,YAAI,CAAC,aAAa,GAAG,aAAa,CAAC;AACnC,YAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;KAC5B;;;;AANgB,8BAA0B,CAOpC,MAAM,GAAA,gBAAC,UAAU,EAAE,aAAa,EAAE,QAAQ,EAAE;AAC/C,eAAO,IAAI,0BAA0B,CAAC,UAAU,EAAE,aAAa,EAAE,QAAQ,CAAC,CAAC;KAC9E;;AATgB,8BAA0B,WAU3C,UAAU,GAAA,oBAAC,UAAU,EAAE;AACnB,YAAM,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;AACnC,YAAM,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;AACzC,YAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;AAC/B,YAAM,OAAO,GAAG,QAAQ,GAAG,UAAU,CAAC,EAAE;AACpC,gBAAI,MAAM,GAAG,0BAAS,QAAQ,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;AACvD,gBAAI,MAAM,iCAAgB,EAAE;AACxB,0BAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;aAC9B,MACI;AACD,0BAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;aAC3B;SACJ,GAAG,UAAU,CAAC,EAAE;AAAE,sBAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;SAAE,CAAC;AACzC,YAAI,MAAM,GAAG,0BAAS,UAAU,CAAC,CAAC,OAAO,CAAC,CAAC;AAC3C,YAAI,MAAM,iCAAgB,EAAE;AACxB,sBAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;SAC9B;AACD,kBAAU,CAAC,GAAG,CAAC,8BAAiB,YAAM;;AAElC,yBAAa,CAAC,OAAO,CAAC,CAAC;SAC1B,CAAC,CAAC,CAAC;KACP;;WA/BgB,0BAA0B;;;qBAA1B,0BAA0B","file":"FromEventPatternObservable.js","sourcesContent":["import Observable from '../Observable';\nimport Subscription from '../Subscription';\nimport tryCatch from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nexport default class FromEventPatternObservable extends Observable {\n    constructor(addHandler, removeHandler, selector) {\n        super();\n        this.addHandler = addHandler;\n        this.removeHandler = removeHandler;\n        this.selector = selector;\n    }\n    static create(addHandler, removeHandler, selector) {\n        return new FromEventPatternObservable(addHandler, removeHandler, selector);\n    }\n    _subscribe(subscriber) {\n        const addHandler = this.addHandler;\n        const removeHandler = this.removeHandler;\n        const selector = this.selector;\n        const handler = selector ? function (e) {\n            let result = tryCatch(selector).apply(null, arguments);\n            if (result === errorObject) {\n                subscriber.error(result.e);\n            }\n            else {\n                subscriber.next(result);\n            }\n        } : function (e) { subscriber.next(e); };\n        let result = tryCatch(addHandler)(handler);\n        if (result === errorObject) {\n            subscriber.error(result.e);\n        }\n        subscriber.add(new Subscription(() => {\n            //TODO: determine whether or not to forward to error handler\n            removeHandler(handler);\n        }));\n    }\n}\n//# sourceMappingURL=FromEventPatternObservable.js.map"]}
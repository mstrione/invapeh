{"version":3,"sources":["../../es6/testing/TestScheduler.js"],"names":[],"mappings":"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","file":"TestScheduler.js","sourcesContent":["import Observable from '../Observable';\nimport VirtualTimeScheduler from '../schedulers/VirtualTimeScheduler';\nimport Notification from '../Notification';\nimport ColdObservable from './ColdObservable';\nimport HotObservable from './HotObservable';\nimport SubscriptionLog from './SubscriptionLog';\nexport class TestScheduler extends VirtualTimeScheduler {\n    constructor(assertDeepEqual) {\n        super();\n        this.assertDeepEqual = assertDeepEqual;\n        this.hotObservables = [];\n        this.flushTests = [];\n    }\n    createColdObservable(marbles, values, error) {\n        if (marbles.indexOf('^') !== -1) {\n            throw new Error('Cold observable cannot have subscription offset \"^\"');\n        }\n        if (marbles.indexOf('!') !== -1) {\n            throw new Error('Cold observable cannot have unsubscription marker \"!\"');\n        }\n        let messages = TestScheduler.parseMarbles(marbles, values, error);\n        return new ColdObservable(messages, this);\n    }\n    createHotObservable(marbles, values, error) {\n        if (marbles.indexOf('!') !== -1) {\n            throw new Error('Hot observable cannot have unsubscription marker \"!\"');\n        }\n        let messages = TestScheduler.parseMarbles(marbles, values, error);\n        const subject = new HotObservable(messages, this);\n        this.hotObservables.push(subject);\n        return subject;\n    }\n    materializeInnerObservable(observable, outerFrame) {\n        let messages = [];\n        observable.subscribe((value) => {\n            messages.push({ frame: this.frame - outerFrame, notification: Notification.createNext(value) });\n        }, (err) => {\n            messages.push({ frame: this.frame - outerFrame, notification: Notification.createError(err) });\n        }, () => {\n            messages.push({ frame: this.frame - outerFrame, notification: Notification.createComplete() });\n        });\n        return messages;\n    }\n    expectObservable(observable, unsubscriptionMarbles = null) {\n        let actual = [];\n        let flushTest = { actual, ready: false };\n        let unsubscriptionFrame = TestScheduler\n            .parseMarblesAsSubscriptions(unsubscriptionMarbles).unsubscribedFrame;\n        let subscription;\n        this.schedule(() => {\n            subscription = observable.subscribe(x => {\n                let value = x;\n                // Support Observable-of-Observables\n                if (x instanceof Observable) {\n                    value = this.materializeInnerObservable(value, this.frame);\n                }\n                actual.push({ frame: this.frame, notification: Notification.createNext(value) });\n            }, (err) => {\n                actual.push({ frame: this.frame, notification: Notification.createError(err) });\n            }, () => {\n                actual.push({ frame: this.frame, notification: Notification.createComplete() });\n            });\n        }, 0);\n        if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n            this.schedule(() => subscription.unsubscribe(), unsubscriptionFrame);\n        }\n        this.flushTests.push(flushTest);\n        return {\n            toBe(marbles, values, errorValue) {\n                flushTest.ready = true;\n                flushTest.expected = TestScheduler.parseMarbles(marbles, values, errorValue, true);\n            }\n        };\n    }\n    expectSubscriptions(actualSubscriptionLogs) {\n        const flushTest = { actual: actualSubscriptionLogs, ready: false };\n        this.flushTests.push(flushTest);\n        return {\n            toBe(marbles) {\n                const marblesArray = (typeof marbles === 'string') ? [marbles] : marbles;\n                flushTest.ready = true;\n                flushTest.expected = marblesArray.map(marbles => TestScheduler.parseMarblesAsSubscriptions(marbles));\n            }\n        };\n    }\n    flush() {\n        const hotObservables = this.hotObservables;\n        while (hotObservables.length > 0) {\n            hotObservables.shift().setup();\n        }\n        super.flush();\n        const readyFlushTests = this.flushTests.filter(test => test.ready);\n        while (readyFlushTests.length > 0) {\n            let test = readyFlushTests.shift();\n            this.assertDeepEqual(test.actual, test.expected);\n        }\n    }\n    static parseMarblesAsSubscriptions(marbles) {\n        if (typeof marbles !== 'string') {\n            return new SubscriptionLog(Number.POSITIVE_INFINITY);\n        }\n        let len = marbles.length;\n        let groupStart = -1;\n        let subscriptionFrame = Number.POSITIVE_INFINITY;\n        let unsubscriptionFrame = Number.POSITIVE_INFINITY;\n        for (let i = 0; i < len; i++) {\n            let frame = i * this.frameTimeFactor;\n            let c = marbles[i];\n            switch (c) {\n                case '-':\n                case ' ':\n                    break;\n                case '(':\n                    groupStart = frame;\n                    break;\n                case ')':\n                    groupStart = -1;\n                    break;\n                case '^':\n                    if (subscriptionFrame !== Number.POSITIVE_INFINITY) {\n                        throw new Error('Found a second subscription point \\'^\\' in a ' +\n                            'subscription marble diagram. There can only be one.');\n                    }\n                    subscriptionFrame = groupStart > -1 ? groupStart : frame;\n                    break;\n                case '!':\n                    if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n                        throw new Error('Found a second subscription point \\'^\\' in a ' +\n                            'subscription marble diagram. There can only be one.');\n                    }\n                    unsubscriptionFrame = groupStart > -1 ? groupStart : frame;\n                    break;\n                default:\n                    throw new Error('There can only be \\'^\\' and \\'!\\' markers in a ' +\n                        'subscription marble diagram. Found instead \\'' + c + '\\'.');\n            }\n        }\n        if (unsubscriptionFrame < 0) {\n            return new SubscriptionLog(subscriptionFrame);\n        }\n        else {\n            return new SubscriptionLog(subscriptionFrame, unsubscriptionFrame);\n        }\n    }\n    static parseMarbles(marbles, values, errorValue, materializeInnerObservables = false) {\n        if (marbles.indexOf('!') !== -1) {\n            throw new Error('Conventional marble diagrams cannot have the ' +\n                'unsubscription marker \"!\"');\n        }\n        let len = marbles.length;\n        let testMessages = [];\n        let subIndex = marbles.indexOf('^');\n        let frameOffset = subIndex === -1 ? 0 : (subIndex * -this.frameTimeFactor);\n        let getValue = typeof values !== 'object' ?\n                (x) => x :\n                (x) => {\n                // Support Observable-of-Observables\n                if (materializeInnerObservables && values[x] instanceof ColdObservable) {\n                    return values[x].messages;\n                }\n                return values[x];\n            };\n        let groupStart = -1;\n        for (let i = 0; i < len; i++) {\n            let frame = i * this.frameTimeFactor;\n            let notification;\n            let c = marbles[i];\n            switch (c) {\n                case '-':\n                case ' ':\n                    break;\n                case '(':\n                    groupStart = frame;\n                    break;\n                case ')':\n                    groupStart = -1;\n                    break;\n                case '|':\n                    notification = Notification.createComplete();\n                    break;\n                case '^':\n                    break;\n                case '#':\n                    notification = Notification.createError(errorValue || 'error');\n                    break;\n                default:\n                    notification = Notification.createNext(getValue(c));\n                    break;\n            }\n            frame += frameOffset;\n            if (notification) {\n                testMessages.push({ frame: groupStart > -1 ? groupStart : frame, notification });\n            }\n        }\n        return testMessages;\n    }\n}\n//# sourceMappingURL=TestScheduler.js.map"]}
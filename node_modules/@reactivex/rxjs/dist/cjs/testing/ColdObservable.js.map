{"version":3,"sources":["../../es6/testing/ColdObservable.js"],"names":[],"mappings":";;;;;;;;;;2BAAuB,eAAe;;;;4BACb,iBAAiB;;;;oCACT,wBAAwB;;;;+BACjC,qBAAqB;;;;IACxB,cAAc;cAAd,cAAc;;AACpB,aADM,cAAc,CACnB,QAAQ,EAAE,SAAS,EAAE;8BADhB,cAAc;;AAE3B,+BAAM,UAAU,UAAU,EAAE;AACxB,gBAAM,UAAU,GAAG,IAAI,CAAC;AACxB,gBAAM,KAAK,GAAG,UAAU,CAAC,kBAAkB,EAAE,CAAC;AAC9C,sBAAU,CAAC,GAAG,CAAC,8BAAiB,YAAM;AAClC,0BAAU,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;aAC1C,CAAC,CAAC,CAAC;AACJ,sBAAU,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;AACxC,mBAAO,UAAU,CAAC;SACrB,CAAC,CAAC;AACH,YAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;AACzB,YAAI,CAAC,aAAa,GAAG,EAAE,CAAC;AACxB,YAAI,CAAC,SAAS,GAAG,SAAS,CAAC;KAC9B;;AAdgB,kBAAc,WAe/B,gBAAgB,GAAA,0BAAC,UAAU,EAAE;AACzB,YAAM,cAAc,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;AAC5C,aAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,cAAc,EAAE,CAAC,EAAE,EAAE;AACrC,gBAAI,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;AAC/B,sBAAU,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,UAAC,IAAuB,EAAK;oBAA1B,OAAO,GAAT,IAAuB,CAArB,OAAO;oBAAE,UAAU,GAArB,IAAuB,CAAZ,UAAU;AAAS,uBAAO,CAAC,YAAY,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;aAAE,EAAE,OAAO,CAAC,KAAK,EAAE,EAAE,OAAO,EAAP,OAAO,EAAE,UAAU,EAAV,UAAU,EAAE,CAAC,CAAC,CAAC;SAC/J;KACJ;;WArBgB,cAAc;;;qBAAd,cAAc;;AAuBnC,6BAAY,cAAc,EAAE,mCAAsB,CAAC,CAAC","file":"ColdObservable.js","sourcesContent":["import Observable from '../Observable';\nimport Subscription from '../Subscription';\nimport SubscriptionLoggable from './SubscriptionLoggable';\nimport applyMixins from '../util/applyMixins';\nexport default class ColdObservable extends Observable {\n    constructor(messages, scheduler) {\n        super(function (subscriber) {\n            const observable = this;\n            const index = observable.logSubscribedFrame();\n            subscriber.add(new Subscription(() => {\n                observable.logUnsubscribedFrame(index);\n            }));\n            observable.scheduleMessages(subscriber);\n            return subscriber;\n        });\n        this.messages = messages;\n        this.subscriptions = [];\n        this.scheduler = scheduler;\n    }\n    scheduleMessages(subscriber) {\n        const messagesLength = this.messages.length;\n        for (let i = 0; i < messagesLength; i++) {\n            let message = this.messages[i];\n            subscriber.add(this.scheduler.schedule(({ message, subscriber }) => { message.notification.observe(subscriber); }, message.frame, { message, subscriber }));\n        }\n    }\n}\napplyMixins(ColdObservable, [SubscriptionLoggable]);\n//# sourceMappingURL=ColdObservable.js.map"]}
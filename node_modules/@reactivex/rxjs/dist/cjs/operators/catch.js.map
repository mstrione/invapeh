{"version":3,"sources":["../../es6/operators/catch.js"],"names":[],"mappings":";;;qBAWwB,MAAM;;;;;;;;2BAXP,eAAe;;;;4BACjB,kBAAkB;;;;+BACX,qBAAqB;;;;;;;;;;;AASlC,SAAS,MAAM,CAAC,QAAQ,EAAE;AACrC,QAAI,aAAa,GAAG,IAAI,aAAa,CAAC,QAAQ,CAAC,CAAC;AAChD,QAAI,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;AACtC,iBAAa,CAAC,MAAM,GAAG,MAAM,CAAC;AAC9B,WAAO,MAAM,CAAC;CACjB;;IACK,aAAa;AACJ,aADT,aAAa,CACH,QAAQ,EAAE;8BADpB,aAAa;;AAEX,YAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;KAC5B;;AAHC,iBAAa,WAIf,IAAI,GAAA,cAAC,UAAU,EAAE;AACb,eAAO,IAAI,eAAe,CAAC,UAAU,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;KACtE;;WANC,aAAa;;;IAQb,eAAe;cAAf,eAAe;;AACN,aADT,eAAe,CACL,WAAW,EAAE,QAAQ,EAAE,MAAM,EAAE;8BADzC,eAAe;;AAEb,+BAAM,WAAW,CAAC,CAAC;AACnB,YAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;AACzB,YAAI,CAAC,MAAM,GAAG,MAAM,CAAC;KACxB;;;;AALC,mBAAe,WAMjB,MAAM,GAAA,gBAAC,GAAG,EAAE;AACR,YAAM,MAAM,GAAG,0BAAS,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;AACzD,YAAI,MAAM,iCAAgB,EAAE;AACxB,gBAAI,CAAC,WAAW,CAAC,KAAK,CAAC,6BAAY,CAAC,CAAC,CAAC;SACzC,MACI;AACD,gBAAI,CAAC,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;SAChD;KACJ;;WAdC,eAAe","file":"catch.js","sourcesContent":["import Subscriber from '../Subscriber';\nimport tryCatch from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} an observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n */\nexport default function _catch(selector) {\n    let catchOperator = new CatchOperator(selector);\n    let caught = this.lift(catchOperator);\n    catchOperator.caught = caught;\n    return caught;\n}\nclass CatchOperator {\n    constructor(selector) {\n        this.selector = selector;\n    }\n    call(subscriber) {\n        return new CatchSubscriber(subscriber, this.selector, this.caught);\n    }\n}\nclass CatchSubscriber extends Subscriber {\n    constructor(destination, selector, caught) {\n        super(destination);\n        this.selector = selector;\n        this.caught = caught;\n    }\n    _error(err) {\n        const result = tryCatch(this.selector)(err, this.caught);\n        if (result === errorObject) {\n            this.destination.error(errorObject.e);\n        }\n        else {\n            this.add(result.subscribe(this.destination));\n        }\n    }\n}\n//# sourceMappingURL=catch.js.map"]}
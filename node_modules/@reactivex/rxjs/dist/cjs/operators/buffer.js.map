{"version":3,"sources":["../../es6/operators/buffer.js"],"names":[],"mappings":";;;qBASwB,MAAM;;;;;;;;2BATP,eAAe;;;;;;;;;;;;;AASvB,SAAS,MAAM,CAAC,eAAe,EAAE;AAC5C,WAAO,IAAI,CAAC,IAAI,CAAC,IAAI,cAAc,CAAC,eAAe,CAAC,CAAC,CAAC;CACzD;;IACK,cAAc;AACL,aADT,cAAc,CACJ,eAAe,EAAE;8BAD3B,cAAc;;AAEZ,YAAI,CAAC,eAAe,GAAG,eAAe,CAAC;KAC1C;;AAHC,kBAAc,WAIhB,IAAI,GAAA,cAAC,UAAU,EAAE;AACb,eAAO,IAAI,gBAAgB,CAAC,UAAU,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;KACjE;;WANC,cAAc;;;IAQd,gBAAgB;cAAhB,gBAAgB;;AACP,aADT,gBAAgB,CACN,WAAW,EAAE,eAAe,EAAE;8BADxC,gBAAgB;;AAEd,+BAAM,WAAW,CAAC,CAAC;AACnB,YAAI,CAAC,MAAM,GAAG,EAAE,CAAC;AACjB,YAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;AAC/B,YAAI,CAAC,kBAAkB,GAAG,IAAI,+BAA+B,CAAC,IAAI,CAAC,CAAC;AACpE,YAAI,CAAC,GAAG,CAAC,eAAe,CAAC,UAAU,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC;KACjE;;AAPC,oBAAgB,WAQlB,KAAK,GAAA,eAAC,KAAK,EAAE;AACT,YAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KAC3B;;AAVC,oBAAgB,WAWlB,MAAM,GAAA,gBAAC,GAAG,EAAE;AACR,YAAI,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;KAC/B;;AAbC,oBAAgB,WAclB,SAAS,GAAA,qBAAG;AACR,YAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC;KAC/B;;AAhBC,oBAAgB,WAiBlB,WAAW,GAAA,uBAAG;AACV,YAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;AAC3B,YAAI,CAAC,MAAM,GAAG,EAAE,CAAC;AACjB,YAAI,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AAC9B,YAAI,IAAI,CAAC,cAAc,EAAE;AACrB,gBAAI,CAAC,kBAAkB,CAAC,WAAW,EAAE,CAAC;SACzC;KACJ;;WAxBC,gBAAgB;;;IA0BhB,+BAA+B;cAA/B,+BAA+B;;AACtB,aADT,+BAA+B,CACrB,MAAM,EAAE;8BADlB,+BAA+B;;AAE7B,gCAAM,IAAI,CAAC,CAAC;AACZ,YAAI,CAAC,MAAM,GAAG,MAAM,CAAC;KACxB;;;;AAJC,mCAA+B,WAKjC,KAAK,GAAA,eAAC,KAAK,EAAE;AACT,YAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;KAC7B;;AAPC,mCAA+B,WAQjC,MAAM,GAAA,gBAAC,GAAG,EAAE;AACR,YAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;KAC1B;;AAVC,mCAA+B,WAWjC,SAAS,GAAA,qBAAG;AACR,YAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;KAC1B;;WAbC,+BAA+B","file":"buffer.js","sourcesContent":["import Subscriber from '../Subscriber';\n/**\n * buffers the incoming observable values until the passed `closingNotifier` emits a value, at which point\n * it emits the buffer on the returned observable and starts a new buffer internally, awaiting the\n * next time `closingNotifier` emits\n *\n * @param {Observable<any>} closingNotifier an observable, that signals the buffer to be emitted from the returned observable\n * @returns {Observable<T[]>} an observable of buffers, which are arrays of values\n */\nexport default function buffer(closingNotifier) {\n    return this.lift(new BufferOperator(closingNotifier));\n}\nclass BufferOperator {\n    constructor(closingNotifier) {\n        this.closingNotifier = closingNotifier;\n    }\n    call(subscriber) {\n        return new BufferSubscriber(subscriber, this.closingNotifier);\n    }\n}\nclass BufferSubscriber extends Subscriber {\n    constructor(destination, closingNotifier) {\n        super(destination);\n        this.buffer = [];\n        this.notifierSubscriber = null;\n        this.notifierSubscriber = new BufferClosingNotifierSubscriber(this);\n        this.add(closingNotifier._subscribe(this.notifierSubscriber));\n    }\n    _next(value) {\n        this.buffer.push(value);\n    }\n    _error(err) {\n        this.destination.error(err);\n    }\n    _complete() {\n        this.destination.complete();\n    }\n    flushBuffer() {\n        const buffer = this.buffer;\n        this.buffer = [];\n        this.destination.next(buffer);\n        if (this.isUnsubscribed) {\n            this.notifierSubscriber.unsubscribe();\n        }\n    }\n}\nclass BufferClosingNotifierSubscriber extends Subscriber {\n    constructor(parent) {\n        super(null);\n        this.parent = parent;\n    }\n    _next(value) {\n        this.parent.flushBuffer();\n    }\n    _error(err) {\n        this.parent.error(err);\n    }\n    _complete() {\n        this.parent.complete();\n    }\n}\n//# sourceMappingURL=buffer.js.map"]}
{"version":3,"sources":["../../es6/operators/concat.js"],"names":[],"mappings":";;;qBASwB,MAAM;;;;0BATP,eAAe;;;;;;;;;;;;;AASvB,SAAS,MAAM,GAAiB;sCAAb,WAAW;AAAX,mBAAW;;;AACzC,QAAI,IAAI,GAAG,WAAW,CAAC;AACvB,QAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AACnB,QAAI,IAAI,CAAC,MAAM,GAAG,CAAC,IAAI,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,QAAQ,KAAK,UAAU,EAAE;AACzE,YAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;KACtC;AACD,WAAO,wBAAW,SAAS,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;CACjD","file":"concat.js","sourcesContent":["import Observable from '../Observable';\n/**\n * Joins this observable with multiple other observables by subscribing to them one at a time, starting with the source,\n * and merging their results into the returned observable. Will wait for each observable to complete before moving\n * on to the next.\n * @params {...Observable} the observables to concatenate\n * @params {Scheduler} [scheduler] an optional scheduler to schedule each observable subscription on.\n * @returns {Observable} All values of each passed observable merged into a single observable, in order, in serial fashion.\n */\nexport default function concat(...observables) {\n    let args = observables;\n    args.unshift(this);\n    if (args.length > 1 && typeof args[args.length - 1].schedule === 'function') {\n        args.splice(args.length - 2, 0, 1);\n    }\n    return Observable.fromArray(args).mergeAll(1);\n}\n//# sourceMappingURL=concat.js.map"]}
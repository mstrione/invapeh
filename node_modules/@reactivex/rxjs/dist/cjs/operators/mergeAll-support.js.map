{"version":3,"sources":["../../es6/operators/mergeAll-support.js"],"names":[],"mappings":";;;;;;;;;;gCAA4B,oBAAoB;;;;qCAClB,2BAA2B;;;;IAC5C,gBAAgB;AACd,aADF,gBAAgB,CACb,UAAU,EAAE;8BADf,gBAAgB;;AAErB,YAAI,CAAC,UAAU,GAAG,UAAU,CAAC;KAChC;;AAHQ,oBAAgB,WAIzB,IAAI,GAAA,cAAC,QAAQ,EAAE;AACX,eAAO,IAAI,kBAAkB,CAAC,QAAQ,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;KAC5D;;WANQ,gBAAgB;;;;;IAQhB,kBAAkB;cAAlB,kBAAkB;;AAChB,aADF,kBAAkB,CACf,WAAW,EAAE,UAAU,EAAE;8BAD5B,kBAAkB;;AAEvB,oCAAM,WAAW,CAAC,CAAC;AACnB,YAAI,CAAC,UAAU,GAAG,UAAU,CAAC;AAC7B,YAAI,CAAC,YAAY,GAAG,KAAK,CAAC;AAC1B,YAAI,CAAC,MAAM,GAAG,EAAE,CAAC;AACjB,YAAI,CAAC,MAAM,GAAG,CAAC,CAAC;KACnB;;;;AAPQ,sBAAkB,WAQ3B,KAAK,GAAA,eAAC,UAAU,EAAE;AACd,YAAI,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,UAAU,EAAE;AAC/B,gBAAI,UAAU,CAAC,SAAS,EAAE;AACtB,oBAAI,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;aAC3C,MACI;AACD,oBAAI,CAAC,MAAM,EAAE,CAAC;AACd,oBAAI,CAAC,GAAG,CAAC,mCAAkB,IAAI,EAAE,UAAU,CAAC,CAAC,CAAC;aACjD;SACJ,MACI;AACD,gBAAI,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;SAChC;KACJ;;AArBQ,sBAAkB,WAsB3B,SAAS,GAAA,qBAAG;AACR,YAAI,CAAC,YAAY,GAAG,IAAI,CAAC;AACzB,YAAI,IAAI,CAAC,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;AAC/C,gBAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC;SAC/B;KACJ;;AA3BQ,sBAAkB,WA4B3B,cAAc,GAAA,wBAAC,QAAQ,EAAE;AACrB,YAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;AAC3B,YAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;AACtB,YAAI,CAAC,MAAM,EAAE,CAAC;AACd,YAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;AACnB,gBAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC;SAC9B,MACI,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC,YAAY,EAAE;AAC7C,gBAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC;SAC/B;KACJ;;WAtCQ,kBAAkB","file":"mergeAll-support.js","sourcesContent":["import OuterSubscriber from '../OuterSubscriber';\nimport subscribeToResult from '../util/subscribeToResult';\nexport class MergeAllOperator {\n    constructor(concurrent) {\n        this.concurrent = concurrent;\n    }\n    call(observer) {\n        return new MergeAllSubscriber(observer, this.concurrent);\n    }\n}\nexport class MergeAllSubscriber extends OuterSubscriber {\n    constructor(destination, concurrent) {\n        super(destination);\n        this.concurrent = concurrent;\n        this.hasCompleted = false;\n        this.buffer = [];\n        this.active = 0;\n    }\n    _next(observable) {\n        if (this.active < this.concurrent) {\n            if (observable._isScalar) {\n                this.destination.next(observable.value);\n            }\n            else {\n                this.active++;\n                this.add(subscribeToResult(this, observable));\n            }\n        }\n        else {\n            this.buffer.push(observable);\n        }\n    }\n    _complete() {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            this.destination.complete();\n        }\n    }\n    notifyComplete(innerSub) {\n        const buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            this.destination.complete();\n        }\n    }\n}\n//# sourceMappingURL=mergeAll-support.js.map"]}
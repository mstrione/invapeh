{"version":3,"sources":["../../es6/operators/count.js"],"names":[],"mappings":";;;qBAkBwB,KAAK;;;;;;;;2BAlBN,eAAe;;;;4BACjB,kBAAkB;;;;+BACX,qBAAqB;;gCACxB,sBAAsB;;;;;;;;;;;;;;;;;;;AAehC,SAAS,KAAK,CAAC,SAAS,EAAE,OAAO,EAAE;AAC9C,WAAO,IAAI,CAAC,IAAI,CAAC,IAAI,aAAa,CAAC,SAAS,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;CACjE;;IACK,aAAa;AACJ,aADT,aAAa,CACH,SAAS,EAAE,OAAO,EAAE,MAAM,EAAE;8BADtC,aAAa;;AAEX,YAAI,CAAC,SAAS,GAAG,SAAS,CAAC;AAC3B,YAAI,CAAC,OAAO,GAAG,OAAO,CAAC;AACvB,YAAI,CAAC,MAAM,GAAG,MAAM,CAAC;KACxB;;AALC,iBAAa,WAMf,IAAI,GAAA,cAAC,UAAU,EAAE;AACb,eAAO,IAAI,eAAe,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;KACrF;;WARC,aAAa;;;IAUb,eAAe;cAAf,eAAe;;AACN,aADT,eAAe,CACL,WAAW,EAAE,SAAS,EAAE,OAAO,EAAE,MAAM,EAAE;8BADnD,eAAe;;AAEb,+BAAM,WAAW,CAAC,CAAC;AACnB,YAAI,CAAC,OAAO,GAAG,OAAO,CAAC;AACvB,YAAI,CAAC,MAAM,GAAG,MAAM,CAAC;AACrB,YAAI,CAAC,KAAK,GAAG,CAAC,CAAC;AACf,YAAI,CAAC,KAAK,GAAG,CAAC,CAAC;AACf,YAAI,OAAO,SAAS,KAAK,UAAU,EAAE;AACjC,gBAAI,CAAC,SAAS,GAAG,8BAAa,SAAS,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;SACxD;KACJ;;;;AAVC,mBAAe,WAWjB,KAAK,GAAA,eAAC,KAAK,EAAE;AACT,YAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;AACjC,YAAI,MAAM,GAAG,IAAI,CAAC;AAClB,YAAI,SAAS,EAAE;AACX,kBAAM,GAAG,0BAAS,SAAS,CAAC,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;AAC/D,gBAAI,MAAM,iCAAgB,EAAE;AACxB,oBAAI,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;AACjC,uBAAO;aACV;SACJ;AACD,YAAI,MAAM,EAAE;AACR,gBAAI,CAAC,KAAK,IAAI,CAAC,CAAC;SACnB;KACJ;;AAxBC,mBAAe,WAyBjB,SAAS,GAAA,qBAAG;AACR,YAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAClC,YAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC;KAC/B;;WA5BC,eAAe","file":"count.js","sourcesContent":["import Subscriber from '../Subscriber';\nimport tryCatch from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport bindCallback from '../util/bindCallback';\n/**\n * Returns an observable of a single number that represents the number of items that either:\n * Match a provided predicate function, _or_ if a predicate is not provided, the number\n * represents the total count of all items in the source observable. The count is emitted\n * by the returned observable when the source observable completes.\n * @param {function} [predicate] a boolean function to select what values are to be counted.\n * it is provided with arguments of:\n *   - `value`: the value from the source observable\n *   - `index`: the \"index\" of the value from the source observable\n *   - `source`: the source observable instance itself.\n * @param {any} [thisArg] the optional `this` context to use in the `predicate` function\n * @returns {Observable} an observable of one number that represents the count as described\n * above\n */\nexport default function count(predicate, thisArg) {\n    return this.lift(new CountOperator(predicate, thisArg, this));\n}\nclass CountOperator {\n    constructor(predicate, thisArg, source) {\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n        this.source = source;\n    }\n    call(subscriber) {\n        return new CountSubscriber(subscriber, this.predicate, this.thisArg, this.source);\n    }\n}\nclass CountSubscriber extends Subscriber {\n    constructor(destination, predicate, thisArg, source) {\n        super(destination);\n        this.thisArg = thisArg;\n        this.source = source;\n        this.count = 0;\n        this.index = 0;\n        if (typeof predicate === 'function') {\n            this.predicate = bindCallback(predicate, thisArg, 3);\n        }\n    }\n    _next(value) {\n        const predicate = this.predicate;\n        let passed = true;\n        if (predicate) {\n            passed = tryCatch(predicate)(value, this.index++, this.source);\n            if (passed === errorObject) {\n                this.destination.error(passed.e);\n                return;\n            }\n        }\n        if (passed) {\n            this.count += 1;\n        }\n    }\n    _complete() {\n        this.destination.next(this.count);\n        this.destination.complete();\n    }\n}\n//# sourceMappingURL=count.js.map"]}
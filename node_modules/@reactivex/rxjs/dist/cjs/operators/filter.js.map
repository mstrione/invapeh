{"version":3,"sources":["../../es6/operators/filter.js"],"names":[],"mappings":";;;qBAawB,MAAM;;;;;;;;2BAbP,eAAe;;;;4BACjB,kBAAkB;;;;+BACX,qBAAqB;;gCACxB,sBAAsB;;;;;;;;;;;;;;AAUhC,SAAS,MAAM,CAAC,MAAM,EAAE,OAAO,EAAE;AAC5C,WAAO,IAAI,CAAC,IAAI,CAAC,IAAI,cAAc,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC;CACzD;;IACK,cAAc;AACL,aADT,cAAc,CACJ,MAAM,EAAE,OAAO,EAAE;8BAD3B,cAAc;;AAEZ,YAAI,CAAC,MAAM,GAAG,8BAAa,MAAM,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;KAClD;;AAHC,kBAAc,WAIhB,IAAI,GAAA,cAAC,UAAU,EAAE;AACb,eAAO,IAAI,gBAAgB,CAAC,UAAU,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;KACxD;;WANC,cAAc;;;IAQd,gBAAgB;cAAhB,gBAAgB;;AACP,aADT,gBAAgB,CACN,WAAW,EAAE,MAAM,EAAE;8BAD/B,gBAAgB;;AAEd,+BAAM,WAAW,CAAC,CAAC;AACnB,YAAI,CAAC,KAAK,GAAG,CAAC,CAAC;AACf,YAAI,CAAC,MAAM,GAAG,MAAM,CAAC;KACxB;;;;AALC,oBAAgB,WAMlB,KAAK,GAAA,eAAC,CAAC,EAAE;AACL,YAAM,MAAM,GAAG,0BAAS,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;AACtD,YAAI,MAAM,iCAAgB,EAAE;AACxB,gBAAI,CAAC,WAAW,CAAC,KAAK,CAAC,6BAAY,CAAC,CAAC,CAAC;SACzC,MACI,IAAI,OAAO,CAAC,MAAM,CAAC,EAAE;AACtB,gBAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;SAC5B;KACJ;;WAdC,gBAAgB","file":"filter.js","sourcesContent":["import Subscriber from '../Subscriber';\nimport tryCatch from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport bindCallback from '../util/bindCallback';\n/**\n * Similar to the well-known `Array.prototype.filter` method, this operator filters values down to a set\n * allowed by a `select` function\n *\n * @param {Function} select a function that is used to select the resulting values\n *  if it returns `true`, the value is emitted, if `false` the value is not passed to the resulting observable\n * @param {any} [thisArg] an optional argument to determine the value of `this` in the `select` function\n * @returns {Observable} an observable of values allowed by the select function\n */\nexport default function filter(select, thisArg) {\n    return this.lift(new FilterOperator(select, thisArg));\n}\nclass FilterOperator {\n    constructor(select, thisArg) {\n        this.select = bindCallback(select, thisArg, 2);\n    }\n    call(subscriber) {\n        return new FilterSubscriber(subscriber, this.select);\n    }\n}\nclass FilterSubscriber extends Subscriber {\n    constructor(destination, select) {\n        super(destination);\n        this.count = 0;\n        this.select = select;\n    }\n    _next(x) {\n        const result = tryCatch(this.select)(x, this.count++);\n        if (result === errorObject) {\n            this.destination.error(errorObject.e);\n        }\n        else if (Boolean(result)) {\n            this.destination.next(x);\n        }\n    }\n}\n//# sourceMappingURL=filter.js.map"]}
{"version":3,"sources":["../../es6/operators/sampleTime.js"],"names":[],"mappings":";;;qBAEwB,UAAU;;;;;;;;2BAFX,eAAe;;;;kCACjB,wBAAwB;;;;AAC9B,SAAS,UAAU,CAAC,KAAK,EAAwB;QAAtB,SAAS;;AAC/C,WAAO,IAAI,CAAC,IAAI,CAAC,IAAI,kBAAkB,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC,CAAC;CAC9D;;IACK,kBAAkB;AACT,aADT,kBAAkB,CACR,KAAK,EAAE,SAAS,EAAE;8BAD5B,kBAAkB;;AAEhB,YAAI,CAAC,KAAK,GAAG,KAAK,CAAC;AACnB,YAAI,CAAC,SAAS,GAAG,SAAS,CAAC;KAC9B;;AAJC,sBAAkB,WAKpB,IAAI,GAAA,cAAC,UAAU,EAAE;AACb,eAAO,IAAI,oBAAoB,CAAC,UAAU,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;KAC3E;;WAPC,kBAAkB;;;IASlB,oBAAoB;cAApB,oBAAoB;;AACX,aADT,oBAAoB,CACV,WAAW,EAAE,KAAK,EAAE,SAAS,EAAE;8BADzC,oBAAoB;;AAElB,+BAAM,WAAW,CAAC,CAAC;AACnB,YAAI,CAAC,KAAK,GAAG,KAAK,CAAC;AACnB,YAAI,CAAC,SAAS,GAAG,SAAS,CAAC;AAC3B,YAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;AACtB,YAAI,CAAC,GAAG,CAAC,SAAS,CAAC,QAAQ,CAAC,oBAAoB,EAAE,KAAK,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,KAAK,EAAL,KAAK,EAAE,CAAC,CAAC,CAAC;KAC1F;;AAPC,wBAAoB,WAQtB,KAAK,GAAA,eAAC,KAAK,EAAE;AACT,YAAI,CAAC,SAAS,GAAG,KAAK,CAAC;AACvB,YAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;KACxB;;AAXC,wBAAoB,WAYtB,UAAU,GAAA,sBAAG;AACT,YAAI,IAAI,CAAC,QAAQ,EAAE;AACf,gBAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;SACzC;KACJ;;WAhBC,oBAAoB;;;AAkB1B,SAAS,oBAAoB,CAAC,KAAK,EAAE;QAC3B,UAAU,GAAY,KAAK,CAA3B,UAAU;QAAE,KAAK,GAAK,KAAK,CAAf,KAAK;;AACvB,cAAU,CAAC,UAAU,EAAE,CAAC;AACxB,QAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;CAC/B","file":"sampleTime.js","sourcesContent":["import Subscriber from '../Subscriber';\nimport nextTick from '../schedulers/nextTick';\nexport default function sampleTime(delay, scheduler = nextTick) {\n    return this.lift(new SampleTimeOperator(delay, scheduler));\n}\nclass SampleTimeOperator {\n    constructor(delay, scheduler) {\n        this.delay = delay;\n        this.scheduler = scheduler;\n    }\n    call(subscriber) {\n        return new SampleTimeSubscriber(subscriber, this.delay, this.scheduler);\n    }\n}\nclass SampleTimeSubscriber extends Subscriber {\n    constructor(destination, delay, scheduler) {\n        super(destination);\n        this.delay = delay;\n        this.scheduler = scheduler;\n        this.hasValue = false;\n        this.add(scheduler.schedule(dispatchNotification, delay, { subscriber: this, delay }));\n    }\n    _next(value) {\n        this.lastValue = value;\n        this.hasValue = true;\n    }\n    notifyNext() {\n        if (this.hasValue) {\n            this.destination.next(this.lastValue);\n        }\n    }\n}\nfunction dispatchNotification(state) {\n    let { subscriber, delay } = state;\n    subscriber.notifyNext();\n    this.schedule(state, delay);\n}\n//# sourceMappingURL=sampleTime.js.map"]}
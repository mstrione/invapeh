{"version":3,"sources":["../../es6/operators/bufferWhen.js"],"names":[],"mappings":"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","file":"bufferWhen.js","sourcesContent":["import Subscriber from '../Subscriber';\nimport tryCatch from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n/**\n * Opens a buffer immediately, then closes the buffer when the observable returned by calling `closingSelector` emits a value.\n * It that immediately opens a new buffer and repeats the process\n * @param {function} a function that takes no arguments and returns an Observable that signals buffer closure\n * @returns {Observable<T[]>} an observable of arrays of buffered values.\n */\nexport default function bufferWhen(closingSelector) {\n    return this.lift(new BufferWhenOperator(closingSelector));\n}\nclass BufferWhenOperator {\n    constructor(closingSelector) {\n        this.closingSelector = closingSelector;\n    }\n    call(subscriber) {\n        return new BufferWhenSubscriber(subscriber, this.closingSelector);\n    }\n}\nclass BufferWhenSubscriber extends Subscriber {\n    constructor(destination, closingSelector) {\n        super(destination);\n        this.closingSelector = closingSelector;\n        this.openBuffer();\n    }\n    _next(value) {\n        this.buffer.push(value);\n    }\n    _error(err) {\n        this.buffer = null;\n        this.destination.error(err);\n    }\n    _complete() {\n        const buffer = this.buffer;\n        this.destination.next(buffer);\n        this.buffer = null;\n        this.destination.complete();\n    }\n    openBuffer() {\n        const prevClosingNotification = this.closingNotification;\n        if (prevClosingNotification) {\n            this.remove(prevClosingNotification);\n            prevClosingNotification.unsubscribe();\n        }\n        const buffer = this.buffer;\n        if (buffer) {\n            this.destination.next(buffer);\n        }\n        this.buffer = [];\n        let closingNotifier = tryCatch(this.closingSelector)();\n        if (closingNotifier === errorObject) {\n            const err = closingNotifier.e;\n            this.buffer = null;\n            this.destination.error(err);\n        }\n        else {\n            this.add(this.closingNotification = closingNotifier._subscribe(new BufferClosingNotifierSubscriber(this)));\n        }\n    }\n}\nclass BufferClosingNotifierSubscriber extends Subscriber {\n    constructor(parent) {\n        super(null);\n        this.parent = parent;\n    }\n    _next() {\n        this.parent.openBuffer();\n    }\n    _error(err) {\n        this.parent.error(err);\n    }\n    _complete() {\n        this.parent.openBuffer();\n    }\n}\n//# sourceMappingURL=bufferWhen.js.map"]}
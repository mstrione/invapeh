{"version":3,"sources":["../../es6/operators/combineAll.js"],"names":[],"mappings":";;;qBAawB,UAAU;;oCAbI,yBAAyB;;;;;;;;;;;;;;;AAahD,SAAS,UAAU,CAAC,OAAO,EAAE;AACxC,SAAO,IAAI,CAAC,IAAI,CAAC,gDAA0B,OAAO,CAAC,CAAC,CAAC;CACxD","file":"combineAll.js","sourcesContent":["import { CombineLatestOperator } from './combineLatest-support';\n/**\n * Takes an Observable of Observables, and collects all observables from it. Once the outer observable\n * completes, it subscribes to all collected observables and \"combines\" their values, such that:\n *  - every time an observable emits, the returned observable emits\n *  - when the returned observable emits, it emits all of the most recent values by:\n *    - if a `project` function is provided, it is called with each recent value from each observable in whatever order they arrived,\n *      and the result of the `project` function is what is emitted by the returned observable\n *    - if there is no `project` function, an array of all of the most recent values is emitted by the returned observable.\n * @param {function} [project] an optional function to map the most recent values from each observable into a new result. Takes each of the\n *   most recent values from each collected observable as arguments, in order.\n * @returns {Observable} an observable of projected results or arrays of recent values.\n */\nexport default function combineAll(project) {\n    return this.lift(new CombineLatestOperator(project));\n}\n//# sourceMappingURL=combineAll.js.map"]}
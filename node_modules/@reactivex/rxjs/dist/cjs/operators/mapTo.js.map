{"version":3,"sources":["../../es6/operators/mapTo.js"],"names":[],"mappings":";;;qBAMwB,KAAK;;;;;;;;2BANN,eAAe;;;;;;;;;;AAMvB,SAAS,KAAK,CAAC,KAAK,EAAE;AACjC,WAAO,IAAI,CAAC,IAAI,CAAC,IAAI,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;CAC9C;;IACK,aAAa;AACJ,aADT,aAAa,CACH,KAAK,EAAE;8BADjB,aAAa;;AAEX,YAAI,CAAC,KAAK,GAAG,KAAK,CAAC;KACtB;;AAHC,iBAAa,WAIf,IAAI,GAAA,cAAC,UAAU,EAAE;AACb,eAAO,IAAI,eAAe,CAAC,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;KACtD;;WANC,aAAa;;;IAQb,eAAe;cAAf,eAAe;;AACN,aADT,eAAe,CACL,WAAW,EAAE,KAAK,EAAE;8BAD9B,eAAe;;AAEb,+BAAM,WAAW,CAAC,CAAC;AACnB,YAAI,CAAC,KAAK,GAAG,KAAK,CAAC;KACtB;;;;AAJC,mBAAe,WAKjB,KAAK,GAAA,eAAC,CAAC,EAAE;AACL,YAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KACrC;;WAPC,eAAe","file":"mapTo.js","sourcesContent":["import Subscriber from '../Subscriber';\n/**\n * Maps every value to the same value every time.\n * @param {any} value the value to map each incoming value to\n * @returns {Observable} an observable of the passed value that emits everytime the source does\n */\nexport default function mapTo(value) {\n    return this.lift(new MapToOperator(value));\n}\nclass MapToOperator {\n    constructor(value) {\n        this.value = value;\n    }\n    call(subscriber) {\n        return new MapToSubscriber(subscriber, this.value);\n    }\n}\nclass MapToSubscriber extends Subscriber {\n    constructor(destination, value) {\n        super(destination);\n        this.value = value;\n    }\n    _next(x) {\n        this.destination.next(this.value);\n    }\n}\n//# sourceMappingURL=mapTo.js.map"]}
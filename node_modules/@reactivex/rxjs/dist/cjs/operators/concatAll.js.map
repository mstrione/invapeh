{"version":3,"sources":["../../es6/operators/concatAll.js"],"names":[],"mappings":";;;qBAYwB,SAAS;;+BAZA,oBAAoB;;;;;;;;;;;;;;AAYtC,SAAS,SAAS,GAAG;AAChC,SAAO,IAAI,CAAC,IAAI,CAAC,sCAAqB,CAAC,CAAC,CAAC,CAAC;CAC7C","file":"concatAll.js","sourcesContent":["import { MergeAllOperator } from './mergeAll-support';\n/**\n * Joins every Observable emitted by the source (an Observable of Observables), in a serial\n * fashion. Subscribing to each one only when the previous one has completed, and merging\n * all of their values into the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and endlessly, and the\n * Observables it emits generally complete slower than the source emits, you can run into\n * memory issues as the incoming observables collect in an unbounded buffer.\n *\n * @returns {Observable} an observable of values merged from the incoming observables.\n */\nexport default function concatAll() {\n    return this.lift(new MergeAllOperator(1));\n}\n//# sourceMappingURL=concatAll.js.map"]}
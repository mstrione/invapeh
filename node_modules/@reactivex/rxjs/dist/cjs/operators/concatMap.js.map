{"version":3,"sources":["../../es6/operators/concatMap.js"],"names":[],"mappings":";;;qBAoBwB,SAAS;;+BApBA,oBAAoB;;;;;;;;;;;;;;;;;;;;;;AAoBtC,SAAS,SAAS,CAAC,OAAO,EAAE,aAAa,EAAE;AACtD,SAAO,IAAI,CAAC,IAAI,CAAC,sCAAqB,OAAO,EAAE,aAAa,EAAE,CAAC,CAAC,CAAC,CAAC;CACrE","file":"concatMap.js","sourcesContent":["import { MergeMapOperator } from './mergeMap-support';\n/**\n * Maps values from the source observable into new Observables, then merges them in a serialized fashion,\n * waiting for each one to complete before merging the next.\n *\n * __Warning:__ if incoming values arrive endlessly and faster than the observables they're being mapped\n * to can complete, it will result in memory issues as created observables amass in an unbounded buffer\n * waiting for their turn to be subscribed to.\n *\n * @param {function} project a function to map incoming values into Observables to be concatenated. accepts\n * the `value` and the `index` as arguments.\n * @param {function} [projectResult] an optional result selector that is applied to values before they're\n * merged into the returned observable. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @returns {Observable} an observable of values merged from the projected Observables as they were subscribed to,\n * one at a time. Optionally, these values may have been projected from a passed `projectResult` argument.\n */\nexport default function concatMap(project, projectResult) {\n    return this.lift(new MergeMapOperator(project, projectResult, 1));\n}\n//# sourceMappingURL=concatMap.js.map"]}